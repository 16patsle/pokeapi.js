var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};// Based on:
// https://codepen.io/SitePoint/pen/KrYrXA?editors=0012
function cachedFetch(a,b,c){if("object"!==("undefined"==typeof b?"undefined":_typeof(b))&&(b={}),"number"!=typeof b.expiry&&(b.expiry=86400),void 0===b.cache&&(b.cache=!0),b.cache){if(-1!==a.indexOf(apiUrl)&&-1!==a.indexOf(apiVersion))// Use shorthand of URL as key
var d="pokeapi.js:"+a.split("/").slice(5,7).join("/");else// Use the URL as the cache key to sessionStorage
var d="pokeapi.js:"+a;var e=localStorage.getItem(d),f=localStorage.getItem(d+":ts");if(null!==e&&null!==f){// it was in sessionStorage! Yay!
// Even though 'whenCached' is a string, this operation
// works because the minus sign tries to convert the
// string to an integer and it will work.
var g=(Date.now()-f)/1e3;if(g<b.expiry){var h=new Response(new Blob([e]));return Promise.resolve(h)}localStorage.removeItem(d),localStorage.removeItem(d+":ts")}}return fetch(a,c).then(function(a){// let's only store in cache if the content-type is
// JSON or something non-binary
if(200===a.status){var b=a.headers.get("Content-Type");b&&(b.match(/application\/json/i)||b.match(/text\//i))&&a.clone().text().then(function(a){localStorage.setItem(d,a),localStorage.setItem(d+":ts",Date.now())})}return a})}var apiUrl="https://pokeapi.co/api/",apiVersion="v2";function getResource(a,b){return a=a.split("/"),a[1]=a[1].replace("undefined",""),a=a.join("/"),new Promise(function(c,d){cachedFetch(apiUrl+apiVersion+"/"+a,b).then(function(a){a.ok?a.json().then(function(a){c(a)}):d(a.status+" "+a.statusText)},function(a){d(a.message)})})}function getResourceFromUrl(a,b){if(-1!==a.indexOf(apiUrl)&&-1!==a.indexOf(apiVersion))return getResource(a.split("/").slice(5,7).join("/"),b)}var getResource$1=Object.freeze({apiUrl:apiUrl,apiVersion:apiVersion,getResource:getResource,getResourceFromUrl:getResourceFromUrl});function getBerry(a){return new Promise(function(b,c){getResource("berry/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getBerryFirmness(a){return new Promise(function(b,c){getResource("berry-firmness/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getBerryFlavor(a){return new Promise(function(b,c){getResource("berry-flavor/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getBerry$1=Object.freeze({getBerry:getBerry,getBerryFirmness:getBerryFirmness,getBerryFlavor:getBerryFlavor});function getContestType(a){return new Promise(function(b,c){getResource("contest-type/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getContestEffect(a){return new Promise(function(b,c){getResource("contest-effect/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getSuperContestEffect(a){return new Promise(function(b,c){getResource("super-contest-effect/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getContest=Object.freeze({getContestType:getContestType,getContestEffect:getContestEffect,getSuperContestEffect:getSuperContestEffect});function getEncounterMethod(a){return new Promise(function(b,c){getResource("encounter-method/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getEncounterCondition(a){return new Promise(function(b,c){getResource("encounter-condition/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getEncounterConditionValue(a){return new Promise(function(b,c){getResource("encounter-condition-value/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getEncounter=Object.freeze({getEncounterMethod:getEncounterMethod,getEncounterCondition:getEncounterCondition,getEncounterConditionValue:getEncounterConditionValue});function getEvolutionChain(a){return new Promise(function(b,c){getResource("evolution-chain/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getEvolutionTrigger(a){return new Promise(function(b,c){getResource("evolution-trigger/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getEvolution=Object.freeze({getEvolutionChain:getEvolutionChain,getEvolutionTrigger:getEvolutionTrigger});function getGeneration(a){return new Promise(function(b,c){getResource("generation/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokedex(a){return new Promise(function(b,c){getResource("pokedex/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getVersion(a){return new Promise(function(b,c){getResource("version/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getVersionGroup(a){return new Promise(function(b,c){getResource("version-group/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getGame=Object.freeze({getGeneration:getGeneration,getPokedex:getPokedex,getVersion:getVersion,getVersionGroup:getVersionGroup});function getItem(a){return new Promise(function(b,c){getResource("item/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getItemAttribute(a){return new Promise(function(b,c){getResource("item-attribute/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getItemCategory(a){return new Promise(function(b,c){getResource("item-category/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getItemFlingEffect(a){return new Promise(function(b,c){getResource("item-fling-effect/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getItemPocket(a){return new Promise(function(b,c){getResource("item-pocket/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getItem$1=Object.freeze({getItem:getItem,getItemAttribute:getItemAttribute,getItemCategory:getItemCategory,getItemFlingEffect:getItemFlingEffect,getItemPocket:getItemPocket});function getLanguage(a){return new Promise(function(b,c){getResource("language/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getLanguage$1=Object.freeze({getLanguage:getLanguage});function getLocation(a){return new Promise(function(b,c){getResource("location/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getLocationArea(a){return new Promise(function(b,c){getResource("location-area/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPalParkArea(a){return new Promise(function(b,c){getResource("pal-park-area/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getRegion(a){return new Promise(function(b,c){getResource("region/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getLocation$1=Object.freeze({getLocation:getLocation,getLocationArea:getLocationArea,getPalParkArea:getPalParkArea,getRegion:getRegion});function getMachine(a){return new Promise(function(b,c){getResource("machine/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getMachine$1=Object.freeze({getMachine:getMachine});function getMove(a){return new Promise(function(b,c){getResource("move/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveAilment(a){return new Promise(function(b,c){getResource("move-ailment/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveBattleStyle(a){return new Promise(function(b,c){getResource("move-battle-style/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveCategory(a){return new Promise(function(b,c){getResource("move-category/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveDamageClass(a){return new Promise(function(b,c){getResource("move-damage-class/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveLearnMethod(a){return new Promise(function(b,c){getResource("move-learn-method/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getMoveTarget(a){return new Promise(function(b,c){getResource("move-target/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getMove$1=Object.freeze({getMove:getMove,getMoveAilment:getMoveAilment,getMoveBattleStyle:getMoveBattleStyle,getMoveCategory:getMoveCategory,getMoveDamageClass:getMoveDamageClass,getMoveLearnMethod:getMoveLearnMethod,getMoveTarget:getMoveTarget});function getAbility(a){return new Promise(function(b,c){getResource("ability/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getCharacteristic(a){return new Promise(function(b,c){getResource("characteristic/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getEggGroup(a){return new Promise(function(b,c){getResource("egg-group/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getGender(a){return new Promise(function(b,c){getResource("gender/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getGrowthRate(a){return new Promise(function(b,c){getResource("growth-rate/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getNature(a){return new Promise(function(b,c){getResource("nature/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokeathlonStat(a){return new Promise(function(b,c){getResource("pokeathlon-stat/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemon(a){return new Promise(function(b,c){getResource("pokemon/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemonColor(a){return new Promise(function(b,c){getResource("pokemon-color/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemonForm(a){return new Promise(function(b,c){getResource("pokemon-form/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemonHabitat(a){return new Promise(function(b,c){getResource("pokemon-habitat/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemonShape(a){return new Promise(function(b,c){getResource("pokemon-shape/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getPokemonSpecies(a){return new Promise(function(b,c){getResource("pokemon-species/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getStat(a){return new Promise(function(b,c){getResource("stat/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}function getType(a){return new Promise(function(b,c){getResource("type/"+a).then(function(a){b(a)}).catch(function(a){c(a)})})}var getPokemon$1=Object.freeze({getAbility:getAbility,getCharacteristic:getCharacteristic,getEggGroup:getEggGroup,getGender:getGender,getGrowthRate:getGrowthRate,getNature:getNature,getPokeathlonStat:getPokeathlonStat,getPokemon:getPokemon,getPokemonColor:getPokemonColor,getPokemonForm:getPokemonForm,getPokemonHabitat:getPokemonHabitat,getPokemonShape:getPokemonShape,getPokemonSpecies:getPokemonSpecies,getStat:getStat,getType:getType}),_extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},index=_extends({},getBerry$1,getContest,getEncounter,getEvolution,getGame,getItem$1,getLanguage$1,getLocation$1,getMachine$1,getMove$1,getPokemon$1,getResource$1);export default index;
//# sourceMappingURL=pokeapi.esm.js.map
